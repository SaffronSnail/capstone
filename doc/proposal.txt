WIP Modular Server Proposal WIP                Page 
Technical Writing Project Cover Sheet 






 http://www.idevnews.com/views/images/uploads/general/wgu_logo.png 









Capstone Proposal Project Name:
	Modular Server
	Student Name:
	Bryan Ferris
	Degree Program:
	BS - Software Development
	Student Mentor Name:
	Tina Gillespie
	

________________
Table of Contents
Capstone Proposal Introduction        
Review of Other Work        
Project Rationale        
Systems Analysis and Methodology        
Goals and Objectives        
Project Deliverables        
Project Plan and Timelines        
References        









________________



Capstone Proposal Introduction
Servers have been used from the earliest days of computers. They take many forms: http servers for web browsers, ftp servers for file sharing, proprietary servers for specific business goals, and more. These servers perform a wide variety of functions, but they all have the same core: listen for requests on a network, process those requests, and possibly return some result to the sender and/or other parties. This project will specify a server which is truly generic; that is, all imaginable server implementations could be described in terms of this project. Accomplishing this involves two subprojects: Attendant, and Butler. Attendant specifies an API that developers can implement to be compatible with this project, and Butler is a command line utility that aids System Administrators in managing and configuring their services.
To better understand the utility of this project, it is useful to consider the perspective of (and relationship between) the two primary parties who would use this software: software developers and system administrators. Software developers use the Attendant API to rapidly create software modules that communicate over a network. System Administrators install Attendant modules to their machine and use use Butler to actively manage their installation.
Consider a developer, Bob, who wants to implement an exciting new protocol, the Wayland protocol which was made to replace X Server. He looks at the Attendant API and sees that he won’t have to worry about writing any low-level socket code; he has to determine what to do with bytes that are read and sent, but she does not have to worry about the mechanics of sending and reading bytes over the network. After his Wayland project matures Bob looks for something else to work on; he decides that he wants to write an XMPP client for instant messaging. Having already learned the Attendant API, he is able to get this project ramped up quickly.
Now consider a system administrator, Sarah, in a medium-sized business. She is setting up a machine that will double as a web server for their external website and a server that multiple thin clients in the business connect to. She is drawn to this project because she appreciates the benefits of using modular software and because the Butler utility gives her the power to control her server dynamically through a REPL as well as script about her server in a full-featured programming language, GNU Guile. She installs the project and downloads 3 modules: Bob’s Wayland and XMPP modules as well as a third-party http module. She uses Butler to configure the attendant searchpath `/root/attendant_modules/*.so’. She sets everything up but runs into a bug while configuring it: if she tries to listen on a port above 32768 it immediately crashes. She files a bug report in this project and a few days later it is fixed. In two months when the company decides that they want an internal FTP server for file sharing among employees she can be confident that she will not run into that bug again because the FTP Attendant module is based on the same code.
I propose to develop these projects. I will start by building the Butler command-line utility. During the development of Butler, I will reach a point where I need to specify the API that Attendant needs to implement in order to continue testing it. Once Butler and Attendant have started to mature I will replace the open-source library with my own implementation before continuing to add features to Attendant and Butler. More details can be found below, under “Goals and Objectives” and “Project Deliverables”.
Review of Other Work
        There are two categories of work that will be reviewed: intellectual papers and working programs. Intellectual papers provide either historical context for the strategies that have been used to successfully provide services or they provide theoretical frameworks to better understand the problem domain. Working programs provide concrete examples of how solutions to problems have been implemented.
Professional Active Server Pages
The Professional Active Server Pages discusses the history and theory of client-server architecture; this will inform the development of the Attendant API. The authors point out that client-server architecture has been present since the earliest days of computing (Holmes 2004a). As the computing industry evolved, different configurations of the client-server architecture were tried. In the beginning, users’ “PC’s” did not have computing power of their own; they were merely a tool for people to access the server, which did all of the computing. The computers used for connecting to the server are referred to as ‘dumb terminals’ or ‘thin clients’. As companies released smaller computers with more power, users were able to access computing power at their terminal which used to require a multi-room server. This led to a peer-to-peer architecture (p2p), where everyone had a copy of their own data but they could communicate with everyone else over the network. Essentially, in a p2p network everyone is a server and the servers talk to each other, instead of users. In order to solve some of the inherent problems with the p2p architecture, including redundant (possibly inconsistent) data, a hybrid solution was formed where a central file server keeps all of the data, but user terminals process the data. Modern networks try to strike a balance between the different architectures, by deciding which tasks should be processed by the server and which tasks should be processed by the client.
There is no clear “best way” to architect a server for all situations. Different server models meet different needs. If a business wants to centralize computing power as much as possible to better track and manage this valuable resource, distributing thin clients to their employees makes sense. If a group of experts decide to create a startup with loosely defined roles it makes sense to use a peer-to-peer architecture. Many businesses of all sizes create hybrid architectures in an attempt to get ‘the best of both worlds’ on top of reducing bandwidth costs. A high-quality server library needs to accommodate any architecture that a business or individual might need.
The authors describe the client-server architecture in more detail by defining the flow of information (Holmes 2004b):
1. Data Capture
2. Business Rules
3. Application Interface
4. Application Server
Data begins at the Data Capture layer, where it is input to the system for the first time. It then travels through the Business Rules layer, which defines simple rules about the data. The authors warn against putting complex logic inside of the business rules layer (for instance, rules which require branching), but they do not make it clear why this practice is dangerous . It is possible that they want to keep this layer lean so that it can run on machines with low amounts of computing power, or that they view it as beneficial to keep this layer extremely stable in order to avoid maintenance costs. In the Application Interface layer the data is transformed from the form that was entered to a form that is more appropriate for processing. For instance, an email server might take the online form it was sent and store it in a database. The final layer, the application server layer, is responsible for processing the data. However, the authors point out that data can flow in either direction through this model - upward flow represents the computer returning data back to the user and that data being displayed in some way.
In light of this observation, we can generalize their model by focusing on the data itself instead of describing who is using the data and how:
1. Data Capture
2. Data Validation
3. Data Transformation
4. Data Reception
This form of the model gets rid of the details about who the entities interacting with the system are, similar to how UML diagrams treat computer users and human users the same. By shedding those details, this model focuses on the data itself. Data Capture can represent either a computer returning a result or a user inputting information. Data Reception can represent either processing the data or displaying it in a user interface; either way, a response might be sent. It is fairly straightforward to translate this process into code; each step in the process defines a hook that the administrator/developer can plug code into. Data Input will normally have a module that either reads bytes from the network or displays an interface to a local user. Data Validation and Data Transformation are more-or-less unchanged from Business Rules and Application Interface, they were simply renamed to focus on the data being transmitted. Data Reception will have a module that either processes data to come up with a result or displays the information to a local user. This allows the same model to be used to represent client-server architectures, peer-to-peer architectures, and hybrid architectures. This model will be referred to as the “Modified PASP Model,” or MPM for short.
E-Commerce on the Cloud: Issues, Attacks & Security
(Lokhande 2013)
Apache HTTP Server
Apache Server is the most common http server implementation in use on the internet (July 2016 Web Server Survey 2016). It is a modular server which allows developers to write their own code and plug it into the server. In order to do this, a developer can write a function in c which returns an int and takes in a request_rec, a structure that Apache uses to represent an http request (Kew 2006). Additionally, the server must be configured to call the function and the module must register itself as a hook. Then, the apxs utility included with Apache can be used to compile the module in a format that Apache can use. Once this is done and the server is running, a user may access the module by making the appropriate request to the server.
Apache allows businesses to provide web pages and other services over the http protocol more quickly than if they had to build everything from scratch. Needless to say it has become a requirement for all but the smallest businesses to have, at a bare minimum, a website providing information to their customers. It is also expected by many consumers that a website provides the ability to schedule appointments, place orders, or perform other activities which are easily automated. Additionally, a 2016 study found that the availability of an intranet for communication made employees view the company as significantly more supportive (Uysal). This is not because of an increase in the number of people offering support, but because of an increase in impact of those who do. Being able to provide services over a network is a valuable business function that the Apache server enables.
The Apache Server has proven itself to be a valuable tool for many businesses, but how does it fit within the Modified PASP Model? As a modular http server it can fulfill all of the steps in the MPM. It provides the facilities for users to send data over the network, and the fact that modules are implemented in c means that any other functionality (for example, a GUI to interact with a connection) can be programmed by developers.
However, Apache is not without its limitations. It requires that code be compiled with apxs, a tool distributed with Apache. Apache could define a more generic way to access modules which would be more flexible in terms of implementation language than the way it currently works. Additionally, it only allows for communication with http. Other protocols, such as ftp are sometimes desirable, and there are use cases where custom protocols need to be created in order to accommodate special needs, such as developers of MMO games who have strict requirements for latency and bandwidth. Apache could be a significantly more versatile server if it wasn’t coupled to http (and it does not have to sacrifice http functionality to achieve this).
SystemD
Project Rationale
        Modern software projects still write the networking code themselves. For instance, both Apache Server (Pquerna 2016) and the Wayland libraries (Ppaalanen 2012) maintain their own separate socket code. These separate code bases may have duplicate bugs that will require duplicate work to fix, and bugs that have been fixed in one may still exist in the other. Simply merging the two codebases is not the simplest solution because they have different architectures and this would not scale better than other solutions considering the number of projects that have socket code in them. This project proposes a framework that allows other projects to hook into it in a generic way which can accommodate many different design architectures.
Systems Analysis and Methodology
        The project is completing pre-production. The goals have been identified and some thought has been put into the organization of the product, but construction has not started yet. In order to meet the goals of this project, I plan on borrowing methods from Scrum; since it is a solo project some of the concepts like stand-up meetings do not apply, but others such as the backlog are still useful. I plan on using the website Trello to keep track of my backlogs. I have used Trello in the past to manage projects. It has a simple, intuitive, and flexible interface for tracking goals and the progress made on them. Each item in my initial backlog will be placed into Trello as a card. Each card will have 2 labels: one indicating whether it is Minimum or Expected and one that indicates which objective it belongs to (see the next section). There will be three columns that cards can be placed in: TODO, In Progress, and Completed. I have used this strategy with success in the past. It is descriptive enough for me to organize my thoughts in a useful way, yet simple enough that I will not waste time doing bookkeeping that has no clear benefit.
The backlogs, presented below, have two levels of organization. At the top level, they are organized by which objective the tasks in the backlog are associated with. Within each objective, there are two different backlogs listed: minimum and expected. The minimum backlogs define what is needed for basic functionality; it can be thought of as a proof-of-concept. The expected backlog defines what is needed for a well-rounded system; it can be thought of as the first iteration.
Butler
Minimum
* Start listening on a specified port
* Dynamically set which Attendants are available
* Send messages to Attendant modules
Expected
* Set which Attendants are available with glob syntax
* Configure Attendant modules
Attendant
Minimum
* Specify the API that Attendants must implement
* Specify the API that Attendants can use
Expected
* Specify the format of Attendants required for Butler to configure modules
* Write an echo server as an Attendant
Tutorial
Minimum
* Hello World tutorial
Expected
* Echo Server tutorial
Specification
Minimum
* Fully document the source files with comments
Expected
* Butler command documentation
   * Specify technical details, including guarantees, of commands
* Attendant API Documentation
   * Specify technical requirements for implementations of the interface
Goals and Objectives
        The two goals for this project are to streamline the process of delivering server functionality to system administrators (the dev-focused goal) and decrease the learning curve for admins to learn new modules (the admin-focused goal). The two subprojects, Attendant and Butler, are obvious objectives to achieve these goals. Attendant is more associated with the dev-focused goal and Butler is more associated with the admin-focused goal.
        The Attendant subproject is responsible for defining how to create modules that are compatible with Butler. This should be a minimal interface that allows Butler to send messages to the Attendant module. For instance, an Attendant needs to know what to do with a connection when one is opened, how to end a session, and how to initialize itself. Attendant modules may be servers, clients, or something else entirely. Therefore, the interface should not assume which end of the connection the module is managing.
        The Butler subproject is a command-line utility that allows system administrators to manage which services are running on their system in addition to statically or dynamically configuring those services. Providing a uniform interface for system administrators is the main way that we achieve the admin-focused goal. However, this is only half of what Butler does; the other half is to act as a back-end for the Attendant modules. In addition to turning the services on and off and configuring them, Butler is responsible for sending signals to the Attendants (start, stop, etc.) and for sending data to them (ie the connections).
Unfortunately, these subprojects do not cover all of the objectives required to meet the goals. There also needs to be documentation about how they work (Specification) and examples of how to use them (Tutorials). Specification and Tutorials are about the three subprojects; the document in question is most closely related to the same goal as the subproject that it is about. For instance, the specification of Butler is more closely associated with the admin-focused goal, while a tutorial on creating an Attendant module is more closely associated with the dev-focused goal.
Specification acts as a reference that both new and experienced users find find useful. It describes the way a system works in enough detail that users can make decisions with confidence and problem can be diagnosed. It must do so in a compact way to minimize the amount of time it takes to retrieve a piece of information.
Tutorials serve as an entry point for new users who need to get a foothold in the system and experienced users who may not be familiar with a particular feature of the system. They should be approachable and not go into too much detail, but should always direct the reader where to go in the specification if they need or desire more details.
Project Deliverables
Butler
* A high-performance networking library
* A library of functions for managing services
* An executable file that starts a REPL for calling the functions in the service-managing library


The networking library will be implemented in C++ with a C interface. This will help the networking library to meet performance requirements. It will expose a simple interface for sending and receiving bytes on a connection. It will not be responsible for handling the protocol used to exchange the data. Note that while these functions are required from Attendant modules to operate, the modules will not be calling these functions directly. Instead, the service-managing library calls these functions on behalf of the Attendant modules. This shields the Attendant modules from underlying changes in the network code.
The service-managing module will be implemented in GNU Guile; the language was designed for close interoperability with C code which makes it easy to integrate with the networking library. It makes sense to use a high-level scripting language to create this utility because performance of this code is not a huge concern and it will be faster to develop in a high-level language.
A small script can be used to start a Guile REPL with the service-managing library pre-loaded, giving system administrators access to all of the commands as well as all the features that Guile itself provides (flow control, variable definitions, etc.) on the command line.
Attendant
* A header file specifying the required functions for an Attendant module
* A header file specifying the functions that an Attendant module can call (eg sending data)


        Two header files are sufficient for the needs of Attendant. The code that calls the functions that Attendants implement is contained in the Butler subproject as is the implementation of functions that Attendants can call. As an interface between Butler and Attendant modules, it does not make sense for the Attendant subproject itself to contain implementation.
Tutorial
* A plain-English document describing an example of creating a minimal Attendant module
   * Source code for the tutorial
* A plain-English document describing typical useage of Butler
* A plain-English document describing an example of creating a script using Butler
   * Source code for the tutorial


Tutorials for API’s come in two parts: the English description of the steps that need to be taken and the code that should result from each step. Providing the English description helps ensure that readers understand the reason that the code is written the way it is as well as providing a more welcoming experience for newcomers. Providing the source code has three benefits: it allows people to ensure that the tutorial contains accurate information; it helps people verify that code they wrote themselves is correct; and it provides a good starting template for people to use (this is why it is very important that tutorial code has good style).
As a command-line tool, the tutorial for using Butler on the command line does not have source code associated with it. It instructs the user on how to get a REPL up and running and refers the reader to the Butler command specification for further information on what functionality is available.
Specification
* Butler command specification
* Attendant API specification


        Specifications simply list the commands or functions that are available and precisely describes the inputs to them and the expected behavior based on the inputs. The Butler command specification faces the system administrator audience; Attendant module implementers should need no knowledge of Butler commands. The reverse is true for the Attendant API specification.


Project Plan and Timelines
        Attendant and Butler will be developed in parallel. This is because Attendant is not an implementation but rather the specification of an interface. The construction of Butler will inform the design of Attendant.
        Note that there is overlap on the deliverables. Some elements of the project will be developed in parallel, so that the construction of some components can inform the construction of others; for instance, the way that Butler is written impacts what functionality Attendant will require from modules. Additionally, some parts of the backlog go hand-in-hand with other parts; for instance, it makes sense to fulfill the specification requirement of fully commenting files while writing the files, rather than commenting after the fact.


Project Deliverable or Milestone
	Duration
	Planned Start Date
	Planned End Date
	Minimum Backlog: Butler
	5 days
	November 20
	November 25
	Minimum Backlog: Attendant
	2 days
	November 14
	November 25
	Expected Backlog: Tutorials
	1 day
	November 26
	November 26
	Minimum Backlog: Specification
	4 days
	November 27
	November 30
	Expected Backlog: Butler
	2 days
	November 31
	December 1
	Expected Backlog: Attendant
	1 day
	December 2
	December 2
	Expected Backlog: Specification
	2 days
	December 3
	December 4
	

________________
References


Homer, A., Enfield, A., Gross, C., Jakab, S., Hartwell, B., Gill, D., . . . Harrison, R. (2004a). The Background to Client/Server. Retrieved October 31, 2016, from https://msdn.microsoft.com/en-us/library/ms952642.aspx
Homer, A., Enfield, A., Gross, C., Jakab, S., Hartwell, B., Gill, D., . . . Harrison, R. (2004b). The Theory of Client Server. Retrieved October 31, 2016, from https://msdn.microsoft.com/en-us/library/ms952652.aspx
July 2016 Web Server Survey. (2016, July 19). Retrieved September 3, 2016, from https://web.archive.org/web/20160810054429/http://news.netcraft.com/archives/2016/07/19/july-2016-web-server-survey.html
Kew, N. (2006, October 3). A look at Apache modules. Retrieved November 03, 2016, from http://www.theregister.co.uk/2006/10/03/apache_modules/
Lokhande, P. p., & Meshram, B. b. (2013). E-Commerce on Cloud: Issues, Attacks & Security. International Journal Of Advanced Research In Computer Science, 4(2), 344-350.
 Ppaalanen. (2012, April 24). Wayland-os.c. Retrieved November 14, 2016, from https://github.com/nobled/wayland/blob/f5ccd7a9e670e097ff9b5faae8a26b3af4bb7b60/src/wayland-os.c 
Pquerna, Ylavic, Jimjag, & Wrowe. (2016, June 8). Mod_proxy_fdpass.c. Retrieved November 14, 2016, from https://github.com/apache/httpd/blob/fbc5e20ead005fd3a2bec05924f9e90dfd195406/modules/proxy/mod_proxy_fdpass.c
Uysal, N. (2016). Social Collaboration in Intranets: The Impact of Social Exchange and Group Norms on Internal Communication. International Journal Of Business Communication, 53(2), 181-199. doi:10.1177/2329488415627270