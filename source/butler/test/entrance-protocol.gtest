#pragma once

#include "entrance-protocol.h"

#include "entrance-request.h"
#include "log.h"

#define UNIMPLEMENTED FAIL() << "This test has not been implemented yet!"

typedef void *(*start_routine_t)(void *);

TEST(EntranceProtocol, SendAndReceiveRequest)
{
  const char attendant_name[] = "ATTENDANT_NAME";
  const unsigned recv_port = 8080;
  const unsigned payload = 12345;

  log("starting to listen...");
  pthread_t listener_thread;
  if (pthread_create(&listener_thread, NULL,
                     reinterpret_cast<start_routine_t>(receive_entrance_request),
                     reinterpret_cast<void *>(static_cast<intptr_t>(recv_port)))
     )
    FAIL() << "Failed to start listening!";
  log("Listening!");

  log("sleep to ensure (but not really...) that we start listening before we "
      "send");
  // TODO: actually ensure that we start listening before sending somehow
  sleep(1);
  log("I'm awake!");

  log("sending the entrance request...");
  send_entrance_request("127.0.0.1", recv_port, attendant_name, payload);
  log("Entrance request sent!");

  log("joining the listener thread...");
  EntranceRequest *request;
  if (pthread_join(listener_thread, (void **)&request) != 0)
    FAIL() << "Failed to join the listener thread!";
  log("Thread joined!");
  
  EXPECT_STREQ(attendant_name, get_attendant_name(request));
  free_entrance_request(&request);
}

TEST(EntranceProtocol, SendAndReceiveResponse)
{
  const unsigned recv_port = 8080;
  const unsigned payload = 12345;

  log("starting to listen...");
  pthread_t listener_thread;
  if (pthread_create(&listener_thread, NULL,
                     reinterpret_cast<start_routine_t>(receive_entrance_request),
                     reinterpret_cast<void *>(static_cast<intptr_t>(recv_port)))
     )
    FAIL() << "Failed to start listening!";
  log("Listening!");

  log("sleep to ensure (but not really...) that we start listening before we "
      "send");
  // TODO: actually ensure that we start listening before sending somehow
  sleep(1);
  log("*yawns* I'm awake!");

  log("sending the entrance response...");
  EntranceRequest dummy;
  strcpy(dummy.host, "127.0.0.1");
  dummy.port = recv_port;
  send_entrance_response(&dummy, payload);
  log("Sent!");

  log("joining the listener thread...");
  EntranceResponse *received_response;
  if (pthread_join(listener_thread, (void **)&received_response) != 0)
    FAIL() << "Failed to join the listener thread!";
  log ("Thread joined!");

  ASSERT_EQ(payload, get_port(received_response));
  free_entrance_response(&received_response);
}

